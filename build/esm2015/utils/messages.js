const MesToKey = {
    divisibleByConstraint: '$property must be divisible by $constraint1',
    negativeNumber: '$property must be a negative number',
    positiveNumber: '$property must be a positive number',
    greaterThan: '$property must not be greater than $constraint1',
    decoratorExpectsObjectAsValue: '$IS_INSTANCE decorator expects and object as value, but got falsy value.',
    notValidDecimalNumber: '$property is not a valid decimal number.',
    BICOrSWIFT: '$property must be a BIC or SWIFT code',
    booleanString: '$property must be a boolean string',
    booleanValue: '$property must be a boolean value',
    BTCAddress: '$property must be a BTC address',
    creditCard: '$property must be a credit card',
    currency: '$property must be a currency',
    dataUriFormat: '$property must be a data uri format',
    dateInstance: '$property must be a Date instance',
    firebasePushId: '$property must be a Firebase Push Id',
    hashOfType: '$property must be a hash of type $constraint1',
    hexColor: '$property must be a hexadecimal color',
    hexNumber: '$property must be a hexadecimal number',
    HSLColor: '$property must be a HSL color',
    IDCardNumber: '$property must be a identity card number',
    ISSN: '$property must be a ISSN',
    JsonString: '$property must be a json string',
    JwtString: '$property must be a jwt string',
    latitudeStringOrNumber: '$property must be a latitude string or number',
    latitudeLongitudeString: '$property must be a latitude,longitude string',
    longitudeStringOrNumber: '$property must be a longitude string or number',
    lowercaseString: '$property must be a lowercase string',
    MACAddress: '$property must be a MAC Address',
    mongodbId: '$property must be a mongodb id',
    nonEmptyObject: '$property must be a non-empty object',
    numberToTheSpecifiedConstraint: '$property must be a number conforming to the specified constraints',
    numberString: '$property must be a number string',
    phoneNumber: '$property must be a phone number',
    port: '$property must be a port',
    postalCode: '$property must be a postal code',
    semanticVersioningSpecification: '$property must be a Semantic Versioning Specification',
    string: '$property must be a string',
    validDomainName: '$property must be a valid domain name',
    validEnumValue: '$property must be a valid enum value',
    ISO8601DateString: '$property must be a valid ISO 8601 date string',
    alpha2Code: '$property must be a valid ISO31661 Alpha2 code',
    alpha3Code: '$property must be a valid ISO31661 Alpha3 code',
    validPhoneNumber: '$property must be a valid phone number',
    timeInHHMM: '$property must be a valid representation of military time in the format HH:MM',
    array: '$property must be an array',
    EAN: '$property must be an EAN (European Article Number)',
    email: '$property must be an email',
    ethereumAddress: '$property must be an Ethereum address',
    IBAN: '$property must be an IBAN',
    instanceOf: '$property must be an instance of $constraint1',
    integerNumber: '$property must be an integer number',
    ipAddress: '$property must be an ip address',
    ISBN: '$property must be an ISBN',
    ISIN: '$property must be an ISIN (stock/security identifier)',
    ISRC: '$property must be an ISRC',
    object: '$property must be an object',
    URLAddress: '$property must be an URL address',
    UUID: '$property must be an UUID',
    base32: '$property must be base32 encoded',
    base64: '$property must be base64 encoded',
    divisibleBy: '$property must be divisible by $constraint1',
    empty: '$property must be empty',
    equalTo: '$property must be equal to $constraint1',
    locale: '$property must be locale',
    longerThanOrEqualToAndShorter: '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters',
    longerThanOrEqualTo: '$property must be longer than or equal to $constraint1 characters',
    magnetUriFormat: '$property must be magnet uri format',
    MIMEType: '$property must be MIME type format',
    followingValues: '$property must be one of the following values: $constraint1',
    RFC3339date: '$property must be RFC 3339 date',
    RGBColor: '$property must be RGB color',
    shorterThanOrEqualTo: '$property must be shorter than or equal to $constraint1 characters',
    uppercase: '$property must be uppercase',
    octalNumber: '$property must be valid octal number',
    passportNumber: '$property must be valid passport number',
    containValues: '$property must contain $constraint1 values',
    containAString: '$property must contain a $constraint1 string',
    fullWidthAndHalfWidthChars: '$property must contain a full-width and half-width characters',
    fullWidthChars: '$property must contain a full-width characters',
    halfWidthChars: '$property must contain a half-width characters',
    surrogatePairChars: '$property must contain any surrogate pairs chars',
    atLeastElements: '$property must contain at least $constraint1 elements',
    notMoreThanElements: '$property must contain not more than $constraint1 elements',
    containOneOrMoreMultiByteChars: '$property must contain one or more multibyte chars',
    onlyASCIIChars: '$property must contain only ASCII characters',
    onlyLetters: '$property must contain only letters (a-zA-Z)',
    onlyLettersAndNumbers: '$property must contain only letters and numbers',
    matchRegularExpression: '$property must match $constraint1 regular expression',
    notBeGreaterThan: '$property must not be greater than $constraint1',
    notBeLessThan: '$property must not be less than $constraint1',
    notBeEmpty: '$property should not be empty',
    notBeEqualTo: '$property should not be equal to $constraint1',
    notBeNullOrUndefined: '$property should not be null or undefined',
    notBeFollowingValues: '$property should not be one of the following values: $constraint1',
    notContainValues: '$property should not contain $constraint1 values',
    notContainAString: '$property should not contain a $constraint1 string',
    byteLengthRange: "$property's byte length must fall into ($constraint1, $constraint2) range",
    allBeUnique: "All $property's elements must be unique",
    eachValueIn: 'each value in ',
    maxAllowedDateFor: 'maximal allowed date for $property is $constraint1',
    minAllowedDate: 'minimal allowed date for $property is $constraint1',
    nestedMustBeObjectArray: 'nested property $property must be either object or array',
};
const MesToRu = {
    '$IS_INSTANCE decorator expects and object as value, but got falsy value.': 'декоратор $IS_INSTANCE ожидает в объекте как значение, но получил ложное значение.',
    '$property is $constraint1': '$property - $constraint1',
    '$property is not a valid decimal number.': 'Это поле не является допустимым десятичным числом.',
    '$property must be a BIC or SWIFT code': 'Это поле должен быть BIC или SWIFT кодом',
    '$property must be a boolean string': 'Это поле должен быть логической строкой',
    '$property must be a boolean value': 'Это поле должен быть логическим значением',
    '$property must be a BTC address': 'Это поле должен быть BTC адресом',
    '$property must be a credit card': 'Это поле должен быть кредитной картой',
    '$property must be a currency': 'Это поле должно быть валютой',
    '$property must be a data uri format': 'Это поле должно быть форматом uri данных',
    '$property must be a Date instance': 'Это поле должен быть экземпляром даты',
    '$property must be a Firebase Push Id': 'Это поле должен быть идентификатором Push в Firebase',
    '$property must be a hash of type $constraint1': 'Это поле должен быть хэшем типа $constraint1',
    '$property must be a hexadecimal color': 'Это поле должен быть шестнадцатеричным цветом',
    '$property must be a hexadecimal number': 'Это поле должен быть шестнадцатеричным числом',
    '$property must be a HSL color': 'Это поле должен быть HSL цветом',
    '$property must be a identity card number': 'Это поле должен быть идентификационным номером карты',
    '$property must be a ISSN': 'Это поле должен быть ISSN',
    '$property must be a json string': 'Это поле должен быть json строкой',
    '$property must be a jwt string': 'Это поле должно быть строкой jwt',
    '$property must be a latitude string or number': 'Это поле должен быть строкой широты или числом',
    '$property must be a latitude,longitude string': 'Это поле должен быть широтой,строка долготы',
    '$property must be a longitude string or number': 'Это поле должен быть строкой или числом',
    '$property must be a lowercase string': 'Это поле должен быть строкой в нижнем регистре',
    '$property must be a MAC Address': 'Это поле должен быть MAC-адресом',
    '$property must be a mongodb id': 'Это поле должен быть идентификатором обезьяны',
    '$property must be a negative number': 'Это поле должно быть отрицательным числом',
    '$property must be a non-empty object': 'Это поле должен быть непустым объектом',
    '$property must be a number conforming to the specified constraints': '$property должен быть числом, соответствующим указанным ограничениям',
    '$property must be a number string': 'Это поле должен быть числовой строкой',
    '$property must be a phone number': 'Это поле должен быть номером телефона',
    '$property must be a port': 'Это поле должен быть портом',
    '$property must be a positive number': 'Это поле должно быть положительным числом',
    '$property must be a postal code': 'Это поле должен быть почтовым индексом',
    '$property must be a Semantic Versioning Specification': '$property должен быть спецификацией для Semantic Versioning',
    '$property must be a string': 'Это поле должен быть строкой',
    '$property must be a UUID': 'Это поле должен быть UUID',
    '$property must be a valid domain name': 'Это поле должен быть допустимым именем домена',
    '$property must be a valid enum value': 'Это поле должен быть допустимым значением enum',
    '$property must be a valid ISO 8601 date string': 'Это поле должен быть допустимой строкой даты ISO 8601',
    '$property must be a valid ISO31661 Alpha2 code': 'Это поле должен быть допустимым ISO31661 код Alpha2',
    '$property must be a valid ISO31661 Alpha3 code': 'Это поле должен быть действительным ISO31661 код Alpha3',
    '$property must be a valid phone number': 'Это поле должен быть действительным номером телефона',
    '$property must be a valid representation of military time in the format HH:MM': '$property должен быть корректным представлением военного времени в формате HH:MM',
    '$property must be an array': 'Это поле должен быть массивом',
    '$property must be an EAN (European Article Number)': 'Это поле должен быть EAN (европейский номер статьи)',
    '$property must be an email': 'Это поле должен быть email',
    '$property must be an Ethereum address': 'Это поле должен быть Ethereum адресом',
    '$property must be an IBAN': 'Это поле должен быть IBAN',
    '$property must be an instance of $constraint1name': 'Это поле должен быть экземпляром $constraint1name',
    '$property must be an integer number': 'Это поле должно быть целым числом',
    '$property must be an ip address': 'Это поле должен быть IP-адресом',
    '$property must be an ISBN': 'Это поле должен быть ISBN',
    '$property must be an ISIN (stock/security identifier)': '$property должен быть ISIN (идентификатор запасов/безопасности)',
    '$property must be an ISRC': 'Это поле должен быть ISRC',
    '$property must be an object': 'Это поле должен быть объектом',
    '$property must be an URL address': 'Это поле должен быть URL-адресом',
    '$property must be base32 encoded': 'Это поле должен быть в кодировке base32',
    '$property must be base64 encoded': 'Это поле должен быть в кодировке base64',
    '$property must be divisible by $constraint1': 'Это поле должен быть делим на $constraint1',
    '$property must be empty': 'Это поле должен быть пустым',
    '$property must be equal to $constraint1': 'Это поле должен быть равен $constraint1',
    '$property must be locale': 'Это поле должен быть локалью',
    '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters': '$property должен быть длиннее или равен $constraint1 и меньше или равен $constraint2 символов',
    '$property must be longer than or equal to $constraint1 characters': '$property должен быть длиннее или равен $constraint1 символов',
    '$property must be magnet uri format': 'Это поле должно быть в формате Magnet uri',
    '$property must be MIME type format': 'Это поле должен быть MIME-форматом',
    '$property must be one of the following values: $constraint1': '$property должен быть одним из следующих значений: $constraint1',
    '$property must be RFC 3339 date': 'Это поле должен быть датой RFC 3339',
    '$property must be RGB color': 'Это поле должен быть RGB цвет',
    '$property must be shorter than or equal to $constraint1 characters': '$property должен быть короче или равен $constraint1 символов',
    '$property must be shorter than or equal to $constraint2 characters': '$property должен быть короче или равен $constraint2 символов',
    '$property must be uppercase': 'Это поле должен быть заглавным',
    '$property must be valid octal number': 'Это поле должно быть действительным восьмеричным числом',
    '$property must be valid passport number': 'Это поле должен быть действительным номером паспорта',
    '$property must contain $constraint1 values': 'Это поле должен содержать $constraint1 значений',
    '$property must contain a $constraint1 string': 'Это поле должен содержать $constraint1 строку',
    '$property must contain a full-width and half-width characters': '$property должен содержать символы с полной шириной и полушириной',
    '$property must contain a full-width characters': 'Это поле должен содержать целую ширину символов',
    '$property must contain a half-width characters': 'Это поле должен содержать символы с половиной ширины',
    '$property must contain any surrogate pairs chars': 'Это поле должен содержать любые пары суррогатных символов',
    '$property must contain at least $constraint1 elements': '$property должен содержать как минимум $constraint1 элементов',
    '$property must contain not more than $constraint1 elements': '$property должен содержать не более $constraint1 элементов',
    '$property must contain one or more multibyte chars': '$property должен содержать один или более символов в мультибайтах',
    '$property must contain only ASCII characters': 'Это поле должен содержать только ASCII символы',
    '$property must contain only letters (a-zA-Z)': 'Это поле должен содержать только буквы (a-zA-Z)',
    '$property must contain only letters and numbers': 'Это поле должен содержать только буквы и цифры',
    '$property must match $constraint1 regular expression': '$property должен совпадать с регулярным выражением $constraint1',
    '$property must not be greater than $constraint1': 'Это поле не должен быть больше чем $constraint1',
    '$property must not be less than $constraint1': 'Это поле должен быть не меньше чем $constraint1',
    '$property should not be empty': 'Это поле не может быть пустым',
    '$property should not be equal to $constraint1': 'Это поле не должен быть равен $constraint1',
    '$property should not be null or undefined': 'Это поле не должен быть пустым или неопределенным',
    '$property should not be one of the following values: $constraint1': '$property не должен быть одним из следующих значений: $constraint1',
    '$property should not contain $constraint1 values': 'Это поле не должен содержать $constraint1 значений',
    '$property should not contain a $constraint1 string': 'Это поле не должен содержать $constraint1 строку',
    "$property's byte length must fall into ($constraint1, $constraint2) range": 'длина байта $property должна совпадать с диапазоном ($constraint1, $constraint2)',
    "All $property's elements must be unique": 'Все элементы $property должны быть уникальными',
    'each value in ': 'каждое значение в ',
    'maximal allowed date for ': 'максимально допустимая дата для ',
    'minimal allowed date for ': 'минимально допустимая дата для ',
    'nested property $property must be either object or array': 'вложенное свойство $property должно быть либо объектом, либо массивом',
};
const Messages = {
    ...Object.entries(MesToKey)
        // @ts-expect-error fef
        .map(([key, values]) => [key, MesToRu[values]])
        .reduce((acc, [key, value], item) => {
        // @ts-expect-error efe
        acc[key] = value;
        return acc;
    }, {}),
};
export default Messages;
//# sourceMappingURL=messages.js.map