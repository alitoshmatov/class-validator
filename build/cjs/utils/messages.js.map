{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../src/utils/messages.ts"],"names":[],"mappings":"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","sourcesContent":["const MesToKey = {\n  divisibleByConstraint: '$property must be divisible by $constraint1',\n  negativeNumber: '$property must be a negative number',\n  positiveNumber: '$property must be a positive number',\n  greaterThan: '$property must not be greater than $constraint1',\n  decoratorExpectsObjectAsValue: '$IS_INSTANCE decorator expects and object as value, but got falsy value.',\n  notValidDecimalNumber: '$property is not a valid decimal number.',\n  BICOrSWIFT: '$property must be a BIC or SWIFT code',\n  booleanString: '$property must be a boolean string',\n  booleanValue: '$property must be a boolean value',\n  BTCAddress: '$property must be a BTC address',\n  creditCard: '$property must be a credit card',\n  currency: '$property must be a currency',\n  dataUriFormat: '$property must be a data uri format',\n  dateInstance: '$property must be a Date instance',\n  firebasePushId: '$property must be a Firebase Push Id',\n  hashOfType: '$property must be a hash of type $constraint1',\n  hexColor: '$property must be a hexadecimal color',\n  hexNumber: '$property must be a hexadecimal number',\n  HSLColor: '$property must be a HSL color',\n  IDCardNumber: '$property must be a identity card number',\n  ISSN: '$property must be a ISSN',\n  JsonString: '$property must be a json string',\n  JwtString: '$property must be a jwt string',\n  latitudeStringOrNumber: '$property must be a latitude string or number',\n  latitudeLongitudeString: '$property must be a latitude,longitude string',\n  longitudeStringOrNumber: '$property must be a longitude string or number',\n  lowercaseString: '$property must be a lowercase string',\n  MACAddress: '$property must be a MAC Address',\n  mongodbId: '$property must be a mongodb id',\n  nonEmptyObject: '$property must be a non-empty object',\n  numberToTheSpecifiedConstraint: '$property must be a number conforming to the specified constraints',\n  numberString: '$property must be a number string',\n  phoneNumber: '$property must be a phone number',\n  port: '$property must be a port',\n  postalCode: '$property must be a postal code',\n  semanticVersioningSpecification: '$property must be a Semantic Versioning Specification',\n  string: '$property must be a string',\n  validDomainName: '$property must be a valid domain name',\n  validEnumValue: '$property must be a valid enum value',\n  ISO8601DateString: '$property must be a valid ISO 8601 date string',\n  alpha2Code: '$property must be a valid ISO31661 Alpha2 code',\n  alpha3Code: '$property must be a valid ISO31661 Alpha3 code',\n  validPhoneNumber: '$property must be a valid phone number',\n  timeInHHMM: '$property must be a valid representation of military time in the format HH:MM',\n  array: '$property must be an array',\n  EAN: '$property must be an EAN (European Article Number)',\n  email: '$property must be an email',\n  ethereumAddress: '$property must be an Ethereum address',\n  IBAN: '$property must be an IBAN',\n  instanceOf: '$property must be an instance of $constraint1',\n  integerNumber: '$property must be an integer number',\n  ipAddress: '$property must be an ip address',\n  ISBN: '$property must be an ISBN',\n  ISIN: '$property must be an ISIN (stock/security identifier)',\n  ISRC: '$property must be an ISRC',\n  object: '$property must be an object',\n  URLAddress: '$property must be an URL address',\n  UUID: '$property must be an UUID',\n  base32: '$property must be base32 encoded',\n  base64: '$property must be base64 encoded',\n  divisibleBy: '$property must be divisible by $constraint1',\n  empty: '$property must be empty',\n  equalTo: '$property must be equal to $constraint1',\n  locale: '$property must be locale',\n  longerThanOrEqualToAndShorter:\n    '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters',\n  longerThanOrEqualTo: '$property must be longer than or equal to $constraint1 characters',\n  magnetUriFormat: '$property must be magnet uri format',\n  MIMEType: '$property must be MIME type format',\n  followingValues: '$property must be one of the following values: $constraint1',\n  RFC3339date: '$property must be RFC 3339 date',\n  RGBColor: '$property must be RGB color',\n  shorterThanOrEqualTo: '$property must be shorter than or equal to $constraint1 characters',\n  uppercase: '$property must be uppercase',\n  octalNumber: '$property must be valid octal number',\n  passportNumber: '$property must be valid passport number',\n  containValues: '$property must contain $constraint1 values',\n  containAString: '$property must contain a $constraint1 string',\n  fullWidthAndHalfWidthChars: '$property must contain a full-width and half-width characters',\n  fullWidthChars: '$property must contain a full-width characters',\n  halfWidthChars: '$property must contain a half-width characters',\n  surrogatePairChars: '$property must contain any surrogate pairs chars',\n  atLeastElements: '$property must contain at least $constraint1 elements',\n  notMoreThanElements: '$property must contain not more than $constraint1 elements',\n  containOneOrMoreMultiByteChars: '$property must contain one or more multibyte chars',\n  onlyASCIIChars: '$property must contain only ASCII characters',\n  onlyLetters: '$property must contain only letters (a-zA-Z)',\n  onlyLettersAndNumbers: '$property must contain only letters and numbers',\n  matchRegularExpression: '$property must match $constraint1 regular expression',\n  notBeGreaterThan: '$property must not be greater than $constraint1',\n  notBeLessThan: '$property must not be less than $constraint1',\n  notBeEmpty: '$property should not be empty',\n  notBeEqualTo: '$property should not be equal to $constraint1',\n  notBeNullOrUndefined: '$property should not be null or undefined',\n  notBeFollowingValues: '$property should not be one of the following values: $constraint1',\n  notContainValues: '$property should not contain $constraint1 values',\n  notContainAString: '$property should not contain a $constraint1 string',\n  byteLengthRange: \"$property's byte length must fall into ($constraint1, $constraint2) range\",\n  allBeUnique: \"All $property's elements must be unique\",\n  eachValueIn: 'each value in ',\n  maxAllowedDateFor: 'maximal allowed date for $property is $constraint1',\n  minAllowedDate: 'minimal allowed date for $property is $constraint1',\n  nestedMustBeObjectArray: 'nested property $property must be either object or array',\n};\n\nconst MesToRu = {\n  '$IS_INSTANCE decorator expects and object as value, but got falsy value.':\n    'декоратор $IS_INSTANCE ожидает в объекте как значение, но получил ложное значение.',\n  '$property is $constraint1': '$property - $constraint1',\n  '$property is not a valid decimal number.': 'Это поле не является допустимым десятичным числом.',\n  '$property must be a BIC or SWIFT code': 'Это поле должен быть BIC или SWIFT кодом',\n  '$property must be a boolean string': 'Это поле должен быть логической строкой',\n  '$property must be a boolean value': 'Это поле должен быть логическим значением',\n  '$property must be a BTC address': 'Это поле должен быть BTC адресом',\n  '$property must be a credit card': 'Это поле должен быть кредитной картой',\n  '$property must be a currency': 'Это поле должно быть валютой',\n  '$property must be a data uri format': 'Это поле должно быть форматом uri данных',\n  '$property must be a Date instance': 'Это поле должен быть экземпляром даты',\n  '$property must be a Firebase Push Id': 'Это поле должен быть идентификатором Push в Firebase',\n  '$property must be a hash of type $constraint1': 'Это поле должен быть хэшем типа $constraint1',\n  '$property must be a hexadecimal color': 'Это поле должен быть шестнадцатеричным цветом',\n  '$property must be a hexadecimal number': 'Это поле должен быть шестнадцатеричным числом',\n  '$property must be a HSL color': 'Это поле должен быть HSL цветом',\n  '$property must be a identity card number': 'Это поле должен быть идентификационным номером карты',\n  '$property must be a ISSN': 'Это поле должен быть ISSN',\n  '$property must be a json string': 'Это поле должен быть json строкой',\n  '$property must be a jwt string': 'Это поле должно быть строкой jwt',\n  '$property must be a latitude string or number': 'Это поле должен быть строкой широты или числом',\n  '$property must be a latitude,longitude string': 'Это поле должен быть широтой,строка долготы',\n  '$property must be a longitude string or number': 'Это поле должен быть строкой или числом',\n  '$property must be a lowercase string': 'Это поле должен быть строкой в нижнем регистре',\n  '$property must be a MAC Address': 'Это поле должен быть MAC-адресом',\n  '$property must be a mongodb id': 'Это поле должен быть идентификатором обезьяны',\n  '$property must be a negative number': 'Это поле должно быть отрицательным числом',\n  '$property must be a non-empty object': 'Это поле должен быть непустым объектом',\n  '$property must be a number conforming to the specified constraints':\n    '$property должен быть числом, соответствующим указанным ограничениям',\n  '$property must be a number string': 'Это поле должен быть числовой строкой',\n  '$property must be a phone number': 'Это поле должен быть номером телефона',\n  '$property must be a port': 'Это поле должен быть портом',\n  '$property must be a positive number': 'Это поле должно быть положительным числом',\n  '$property must be a postal code': 'Это поле должен быть почтовым индексом',\n  '$property must be a Semantic Versioning Specification':\n    '$property должен быть спецификацией для Semantic Versioning',\n  '$property must be a string': 'Это поле должен быть строкой',\n  '$property must be a UUID': 'Это поле должен быть UUID',\n  '$property must be a valid domain name': 'Это поле должен быть допустимым именем домена',\n  '$property must be a valid enum value': 'Это поле должен быть допустимым значением enum',\n  '$property must be a valid ISO 8601 date string': 'Это поле должен быть допустимой строкой даты ISO 8601',\n  '$property must be a valid ISO31661 Alpha2 code': 'Это поле должен быть допустимым ISO31661 код Alpha2',\n  '$property must be a valid ISO31661 Alpha3 code': 'Это поле должен быть действительным ISO31661 код Alpha3',\n  '$property must be a valid phone number': 'Это поле должен быть действительным номером телефона',\n  '$property must be a valid representation of military time in the format HH:MM':\n    '$property должен быть корректным представлением военного времени в формате HH:MM',\n  '$property must be an array': 'Это поле должен быть массивом',\n  '$property must be an EAN (European Article Number)': 'Это поле должен быть EAN (европейский номер статьи)',\n  '$property must be an email': 'Это поле должен быть email',\n  '$property must be an Ethereum address': 'Это поле должен быть Ethereum адресом',\n  '$property must be an IBAN': 'Это поле должен быть IBAN',\n  '$property must be an instance of $constraint1name': 'Это поле должен быть экземпляром $constraint1name',\n  '$property must be an integer number': 'Это поле должно быть целым числом',\n  '$property must be an ip address': 'Это поле должен быть IP-адресом',\n  '$property must be an ISBN': 'Это поле должен быть ISBN',\n  '$property must be an ISIN (stock/security identifier)':\n    '$property должен быть ISIN (идентификатор запасов/безопасности)',\n  '$property must be an ISRC': 'Это поле должен быть ISRC',\n  '$property must be an object': 'Это поле должен быть объектом',\n  '$property must be an URL address': 'Это поле должен быть URL-адресом',\n  '$property must be base32 encoded': 'Это поле должен быть в кодировке base32',\n  '$property must be base64 encoded': 'Это поле должен быть в кодировке base64',\n  '$property must be divisible by $constraint1': 'Это поле должен быть делим на $constraint1',\n  '$property must be empty': 'Это поле должен быть пустым',\n  '$property must be equal to $constraint1': 'Это поле должен быть равен $constraint1',\n  '$property must be locale': 'Это поле должен быть локалью',\n  '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters':\n    '$property должен быть длиннее или равен $constraint1 и меньше или равен $constraint2 символов',\n  '$property must be longer than or equal to $constraint1 characters':\n    '$property должен быть длиннее или равен $constraint1 символов',\n  '$property must be magnet uri format': 'Это поле должно быть в формате Magnet uri',\n  '$property must be MIME type format': 'Это поле должен быть MIME-форматом',\n  '$property must be one of the following values: $constraint1':\n    '$property должен быть одним из следующих значений: $constraint1',\n  '$property must be RFC 3339 date': 'Это поле должен быть датой RFC 3339',\n  '$property must be RGB color': 'Это поле должен быть RGB цвет',\n  '$property must be shorter than or equal to $constraint1 characters':\n    '$property должен быть короче или равен $constraint1 символов',\n  '$property must be shorter than or equal to $constraint2 characters':\n    '$property должен быть короче или равен $constraint2 символов',\n  '$property must be uppercase': 'Это поле должен быть заглавным',\n  '$property must be valid octal number': 'Это поле должно быть действительным восьмеричным числом',\n  '$property must be valid passport number': 'Это поле должен быть действительным номером паспорта',\n  '$property must contain $constraint1 values': 'Это поле должен содержать $constraint1 значений',\n  '$property must contain a $constraint1 string': 'Это поле должен содержать $constraint1 строку',\n  '$property must contain a full-width and half-width characters':\n    '$property должен содержать символы с полной шириной и полушириной',\n  '$property must contain a full-width characters': 'Это поле должен содержать целую ширину символов',\n  '$property must contain a half-width characters': 'Это поле должен содержать символы с половиной ширины',\n  '$property must contain any surrogate pairs chars': 'Это поле должен содержать любые пары суррогатных символов',\n  '$property must contain at least $constraint1 elements':\n    '$property должен содержать как минимум $constraint1 элементов',\n  '$property must contain not more than $constraint1 elements':\n    '$property должен содержать не более $constraint1 элементов',\n  '$property must contain one or more multibyte chars':\n    '$property должен содержать один или более символов в мультибайтах',\n  '$property must contain only ASCII characters': 'Это поле должен содержать только ASCII символы',\n  '$property must contain only letters (a-zA-Z)': 'Это поле должен содержать только буквы (a-zA-Z)',\n  '$property must contain only letters and numbers': 'Это поле должен содержать только буквы и цифры',\n  '$property must match $constraint1 regular expression':\n    '$property должен совпадать с регулярным выражением $constraint1',\n  '$property must not be greater than $constraint1': 'Это поле не должен быть больше чем $constraint1',\n  '$property must not be less than $constraint1': 'Это поле должен быть не меньше чем $constraint1',\n  '$property should not be empty': 'Это поле не может быть пустым',\n  '$property should not be equal to $constraint1': 'Это поле не должен быть равен $constraint1',\n  '$property should not be null or undefined': 'Это поле не должен быть пустым или неопределенным',\n  '$property should not be one of the following values: $constraint1':\n    '$property не должен быть одним из следующих значений: $constraint1',\n  '$property should not contain $constraint1 values': 'Это поле не должен содержать $constraint1 значений',\n  '$property should not contain a $constraint1 string': 'Это поле не должен содержать $constraint1 строку',\n  \"$property's byte length must fall into ($constraint1, $constraint2) range\":\n    'длина байта $property должна совпадать с диапазоном ($constraint1, $constraint2)',\n  \"All $property's elements must be unique\": 'Все элементы $property должны быть уникальными',\n  'each value in ': 'каждое значение в ',\n  'maximal allowed date for ': 'максимально допустимая дата для ',\n  'minimal allowed date for ': 'минимально допустимая дата для ',\n  'nested property $property must be either object or array':\n    'вложенное свойство $property должно быть либо объектом, либо массивом',\n};\n\nconst Messages = {\n  ...Object.entries(MesToKey)\n\n    // @ts-expect-error fef\n    .map(([key, values]) => [key, MesToRu[values]])\n    .reduce((acc, [key, value], item) => {\n      // @ts-expect-error efe\n      acc[key] = value;\n      return acc;\n    }, {}),\n};\n\nexport default Messages;\n"]}