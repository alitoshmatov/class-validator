{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../src/utils/messages.ts"],"names":[],"mappings":"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","sourcesContent":["// const Messages = {\n//   divisibleByConstraint: '$property must be divisible by $constraint1',\n//   negativeNumber: '$property must be a negative number',\n//   positiveNumber: '$property must be a positive number',\n//   greaterThan: '$property must not be greater than $constraint1',\n//   decoratorExpectsObjectAsValue: '$IS_INSTANCE decorator expects and object as value, but got falsy value.',\n//   notValidDecimalNumber: '$property is not a valid decimal number.',\n//   BICOrSWIFT: '$property must be a BIC or SWIFT code',\n//   booleanString: '$property must be a boolean string',\n//   booleanValue: '$property must be a boolean value',\n//   BTCAddress: '$property must be a BTC address',\n//   creditCard: '$property must be a credit card',\n//   currency: '$property must be a currency',\n//   dataUriFormat: '$property must be a data uri format',\n//   dateInstance: '$property must be a Date instance',\n//   firebasePushId: '$property must be a Firebase Push Id',\n//   hashOfType: '$property must be a hash of type $constraint1',\n//   hexColor: '$property must be a hexadecimal color',\n//   hexNumber: '$property must be a hexadecimal number',\n//   HSLColor: '$property must be a HSL color',\n//   IDCardNumber: '$property must be a identity card number',\n//   ISSN: '$property must be a ISSN',\n//   JsonString: '$property must be a json string',\n//   JwtString: '$property must be a jwt string',\n//   latitudeStringOrNumber: '$property must be a latitude string or number',\n//   latitudeLongitudeString: '$property must be a latitude,longitude string',\n//   longitudeStringOrNumber: '$property must be a longitude string or number',\n//   lowercaseString: '$property must be a lowercase string',\n//   MACAddress: '$property must be a MAC Address',\n//   mongodbId: '$property must be a mongodb id',\n//   nonEmptyObject: '$property must be a non-empty object',\n//   numberToTheSpecifiedConstraint: '$property must be a number conforming to the specified constraints',\n//   numberString: '$property must be a number string',\n//   phoneNumber: '$property must be a phone number',\n//   port: '$property must be a port',\n//   postalCode: '$property must be a postal code',\n//   semanticVersioningSpecification: '$property must be a Semantic Versioning Specification',\n//   string: '$property must be a string',\n//   validDomainName: '$property must be a valid domain name',\n//   validEnumValue: '$property must be a valid enum value',\n//   ISO8601DateString: '$property must be a valid ISO 8601 date string',\n//   alpha2Code: '$property must be a valid ISO31661 Alpha2 code',\n//   alpha3Code: '$property must be a valid ISO31661 Alpha3 code',\n//   validPhoneNumber: '$property must be a valid phone number',\n//   timeInHHMM: '$property must be a valid representation of military time in the format HH:MM',\n//   array: '$property must be an array',\n//   EAN: '$property must be an EAN (European Article Number)',\n//   email: '$property must be an email',\n//   ethereumAddress: '$property must be an Ethereum address',\n//   IBAN: '$property must be an IBAN',\n//   instanceOf: '$property must be an instance of $constraint1',\n//   integerNumber: '$property must be an integer number',\n//   ipAddress: '$property must be an ip address',\n//   ISBN: '$property must be an ISBN',\n//   ISIN: '$property must be an ISIN (stock/security identifier)',\n//   ISRC: '$property must be an ISRC',\n//   object: '$property must be an object',\n//   URLAddress: '$property must be an URL address',\n//   UUID: '$property must be an UUID',\n//   base32: '$property must be base32 encoded',\n//   base64: '$property must be base64 encoded',\n//   divisibleBy: '$property must be divisible by $constraint1',\n//   empty: '$property must be empty',\n//   equalTo: '$property must be equal to $constraint1',\n//   locale: '$property must be locale',\n//   longerThanOrEqualToAndShorter:\n//     '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters',\n//   longerThanOrEqualTo: '$property must be longer than or equal to $constraint1 characters',\n//   magnetUriFormat: '$property must be magnet uri format',\n//   MIMEType: '$property must be MIME type format',\n//   followingValues: '$property must be one of the following values: $constraint1',\n//   RFC3339date: '$property must be RFC 3339 date',\n//   RGBColor: '$property must be RGB color',\n//   shorterThanOrEqualTo: '$property must be shorter than or equal to $constraint1 characters',\n//   uppercase: '$property must be uppercase',\n//   octalNumber: '$property must be valid octal number',\n//   passportNumber: '$property must be valid passport number',\n//   containValues: '$property must contain $constraint1 values',\n//   containAString: '$property must contain a $constraint1 string',\n//   fullWidthAndHalfWidthChars: '$property must contain a full-width and half-width characters',\n//   fullWidthChars: '$property must contain a full-width characters',\n//   halfWidthChars: '$property must contain a half-width characters',\n//   surrogatePairChars: '$property must contain any surrogate pairs chars',\n//   atLeastElements: '$property must contain at least $constraint1 elements',\n//   notMoreThanElements: '$property must contain not more than $constraint1 elements',\n//   containOneOrMoreMultiByteChars: '$property must contain one or more multibyte chars',\n//   onlyASCIIChars: '$property must contain only ASCII characters',\n//   onlyLetters: '$property must contain only letters (a-zA-Z)',\n//   onlyLettersAndNumbers: '$property must contain only letters and numbers',\n//   matchRegularExpression: '$property must match $constraint1 regular expression',\n//   notBeGreaterThan: '$property must not be greater than $constraint1',\n//   notBeLessThan: '$property must not be less than $constraint1',\n//   notBeEmpty: '$property should not be empty',\n//   notBeEqualTo: '$property should not be equal to $constraint1',\n//   notBeNullOrUndefined: '$property should not be null or undefined',\n//   notBeFollowingValues: '$property should not be one of the following values: $constraint1',\n//   notContainValues: '$property should not contain $constraint1 values',\n//   notContainAString: '$property should not contain a $constraint1 string',\n//   byteLengthRange: \"$property's byte length must fall into ($constraint1, $constraint2) range\",\n//   allBeUnique: \"All $property's elements must be unique\",\n//   eachValueIn: 'each value in ',\n//   maxAllowedDateFor: 'maximal allowed date for $property is $constraint1',\n//   minAllowedDate: 'minimal allowed date for $property is $constraint1',\n//   nestedMustBeObjectArray: 'nested property $property must be either object or array',\n// };\n\nconst Messages = {\n  divisibleByConstraint: '$property должно делиться на $constraint1',\n  negativeNumber: '$property должно быть отрицательным числом',\n  positiveNumber: '$property должно быть положительным числом',\n  greaterThan: '$property не должно быть больше, чем $constraint1',\n  decoratorExpectsObjectAsValue: 'декоратор $IS_INSTANCE ожидает и объект как значение, но получил ложное значение.',\n  notValidDecimalNumber: '$property не является допустимым десятичным числом.',\n  BICOrSWIFT: '$property должен быть кодом BIC или SWIFT',\n  booleanString: '$property должен быть логической строкой',\n  booleanValue: '$property должен быть логическим значением',\n  BTCAddress: '$property должен быть адрес BTC',\n  creditCard: '$property должно быть отрицательным числом0',\n  currency: '$property должно быть отрицательным числом1',\n  dataUriFormat: '$property должно быть отрицательным числом2',\n  dateInstance: '$property должно быть отрицательным числом3',\n  firebasePushId: '$property должно быть отрицательным числом4',\n  hashOfType: '$property должно быть отрицательным числом5',\n  hexColor: '$property должно быть отрицательным числом6',\n  hexNumber: '$property должно быть отрицательным числом7',\n  HSLColor: '$property должно быть отрицательным числом8',\n  IDCardNumber: '$property должно быть отрицательным числом9',\n  ISSN: '$property должно быть положительным числом0',\n  JsonString: '$property должно быть положительным числом1',\n  JwtString: '$property должно быть положительным числом2',\n  latitudeStringOrNumber: '$property должно быть положительным числом3',\n  latitudeLongitudeString: '$property должно быть положительным числом4',\n  longitudeStringOrNumber: '$property должно быть положительным числом5',\n  lowercaseString: '$property должно быть положительным числом6',\n  MACAddress: '$property должно быть положительным числом7',\n  mongodbId: '$property должно быть положительным числом8',\n  nonEmptyObject: '$property должно быть положительным числом9',\n  numberToTheSpecifiedConstraint: '$property не должно быть больше, чем $constraint10',\n  numberString: '$property не должно быть больше, чем $constraint11',\n  phoneNumber: '$property не должно быть больше, чем $constraint12',\n  port: '$property не должно быть больше, чем $constraint13',\n  postalCode: '$property не должно быть больше, чем $constraint14',\n  semanticVersioningSpecification: '$property не должно быть больше, чем $constraint15',\n  string: '$property не должно быть больше, чем $constraint16',\n  validDomainName: '$property не должно быть больше, чем $constraint17',\n  validEnumValue: '$property не должно быть больше, чем $constraint18',\n  ISO8601DateString: '$property не должно быть больше, чем $constraint19',\n  alpha2Code: 'декоратор $IS_INSTANCE ожидает и объект как значение, но получил ложное значение.0',\n  alpha3Code: 'декоратор $IS_INSTANCE ожидает и объект как значение, но получил ложное значение.1',\n  validPhoneNumber: 'декоратор $IS_INSTANCE ожидает и объект как значение, но получил ложное значение.2',\n  timeInHHMM: 'декоратор $IS_INSTANCE ожидает и объект как значение, но получил ложное значение.3',\n  array: 'декоратор $IS_INSTANCE ожидает и объект как значение, но получил ложное значение.4',\n  EAN: 'декоратор $IS_INSTANCE ожидает и объект как значение, но получил ложное значение.5',\n  email: 'декоратор $IS_INSTANCE ожидает и объект как значение, но получил ложное значение.6',\n  ethereumAddress: 'декоратор $IS_INSTANCE ожидает и объект как значение, но получил ложное значение.7',\n  IBAN: '$property должен быть IBAN',\n  instanceOf: '$property должен быть экземпляром $constraint1',\n  integerNumber: '$property должен быть целым числом',\n  ipAddress: '$property должен быть IP-адресом',\n  ISBN: '$property должен быть ISBN',\n  ISIN: '$property должен быть ISIN (идентификатор акции/ценной бумаги)',\n  ISRC: '$property должен быть ISRC',\n  object: '$property должен быть объектом',\n  URLAddress: '$property должен быть URL-адресом',\n  UUID: '$property должен быть UUID',\n  base32: '$property должен быть экземпляром $constraint10',\n  base64: '$property должен быть экземпляром $constraint11',\n  divisibleBy: '$property должен быть экземпляром $constraint12',\n  empty: '$property должен быть экземпляром $constraint13',\n  equalTo: '$property должен быть экземпляром $constraint14',\n  locale: '$property должен быть экземпляром $constraint15',\n  longerThanOrEqualToAndShorter: '$property должен быть экземпляром $constraint16',\n  longerThanOrEqualTo: '$property должен быть экземпляром $constraint17',\n  magnetUriFormat: '$property должен быть экземпляром $constraint18',\n  MIMEType: '$property должен быть экземпляром $constraint19',\n  followingValues: '$property должен быть целым числом0',\n  RFC3339date: '$property должен быть целым числом1',\n  RGBColor: '$property должен быть целым числом2',\n  shorterThanOrEqualTo: '$property должен быть целым числом3',\n  uppercase: '$property должен быть целым числом4',\n  octalNumber: '$property должен быть целым числом5',\n  passportNumber: '$property должен быть целым числом6',\n  containValues: '$property должен быть целым числом7',\n  containAString: '$property должен быть целым числом8',\n  fullWidthAndHalfWidthChars: '$property должен быть целым числом9',\n  fullWidthChars: '$property должен быть IP-адресом0',\n  halfWidthChars: '$property должен быть IP-адресом1',\n  surrogatePairChars: '$property должен быть IP-адресом2',\n  atLeastElements: '$property должен быть IP-адресом3',\n  notMoreThanElements: '$property должен быть IP-адресом4',\n  containOneOrMoreMultiByteChars: '$property должен быть IP-адресом5',\n  onlyASCIIChars: '$property должен быть IP-адресом6',\n  onlyLetters: '$property должен содержать только буквы (a-zA-Z)',\n  onlyLettersAndNumbers: '$property должен содержать только буквы и цифры',\n  matchRegularExpression: '$property должен соответствовать регулярному выражению $constraint1',\n  notBeGreaterThan: '$property не должен превышать $constraint1',\n  notBeLessThan: '$property должен не должно быть меньше $constraint1',\n  notBeEmpty: '$property не должно быть пустым',\n  notBeEqualTo: '$property не должно быть равно $constraint1',\n  notBeNullOrUndefined: '$property не должно быть нулевым или неопределенным',\n  notBeFollowingValues: '$property не должно быть одним из следующих значений: $constraint1 ',\n  notContainValues: '$property не должен содержать значения $constraint1',\n  notContainAString: '$property не должен содержать строку $constraint1',\n  byteLengthRange: 'длина $property в байтах должна попадать в диапазон ($constraint1, $constraint2)',\n  allBeUnique: 'все элементы $property должны быть уникальными',\n  eachValueIn: 'каждое значение in ',\n  maxAllowedDateFor: 'максимальная допустимая дата для $property — $constraint1',\n  minAllowedDate: 'минимально допустимая дата для $property — $constraint1',\n  nestedMustBeObjectArray: 'вложенное свойство $property должно быть либо объектом, либо массивом',\n};\n\nexport default Messages;\n"]}