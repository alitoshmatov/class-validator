const Messages = {
  // propertyMustContainsConstraintValues :"$property must contain $constraint1 values",
  // propertyMustContainNotMoreThanConstraint:"$property must contain not more than $constraint1 elements",
  // propertyMustContainNotLessThanConstraint:'$property must contain at least $constraint1 elements',
  // propertyMustNotContainConstraints:'$property must contain at least $constraint1 elements',
  // allPropertysElementsMustBeUnique:"All $property's elements must be unique",
  // propertyShouldNotBeEmpty:'$property should not be empty',
  // propertyMustBeEqualToConstraint:'$property must be equal to $constraint1',
  // propertyShouldNotBeNullOrUndefined:'$property should not be null or undefined',
  // propertyMustBeEmpty:'$property must be empty',
  // propertyMustBeOneOfTheFollowingValues: '$property must be one of the following values: $constraint1',
  // propertyMustBeLatitudeStringOrNumber:'$property must be a latitude string or number',
  // latitudeLongitudeString:'$property must be a latitude,longitude string',
  // longituteStringNumber:'$property must be a longitude string or number',
  // notOnOfTheFollowingValues:'$property should not be one of the following values: $constraint1',
  // notEqual:'$property should not be equal to $constraint1',
  // maxAllowedDateFor:'maximal allowed date for ',
  // propertyIsConstraint:'$property is $constraint1',
  // eachValueIn: 'each value in ',
  // nestedPropertyMustBeObjectOrArray:'nested property $property must be either object or array',
  // minAllowedDate: 'minimal allowed date for ',
  divisibleByConstraint: '$property must be divisible by $constraint1',
  negativeNumber: '$property must be a negative number',
  positiveNumber: '$property must be a positive number',
  greaterThan: '$property must not be greater than $constraint1',
  decoratorExpectsObjectAsValue: '$IS_INSTANCE decorator expects and object as value, but got falsy value.',
  notValidDecimalNumber: '$property is not a valid decimal number.',
  BICOrSWIFT: '$property must be a BIC or SWIFT code',
  booleanString: '$property must be a boolean string',
  booleanValue: '$property must be a boolean value',
  BTCAddress: '$property must be a BTC address',
  creditCard: '$property must be a credit card',
  currency: '$property must be a currency',
  dataUriFormat: '$property must be a data uri format',
  dateInstance: '$property must be a Date instance',
  firebasePushId: '$property must be a Firebase Push Id',
  hashOfType: '$property must be a hash of type $constraint1',
  hexColor: '$property must be a hexadecimal color',
  hexNumber: '$property must be a hexadecimal number',
  HSLColor: '$property must be a HSL color',
  IDCardNumber: '$property must be a identity card number',
  ISSN: '$property must be a ISSN',
  JsonString: '$property must be a json string',
  JwtString: '$property must be a jwt string',
  latitudeStringOrNumber: '$property must be a latitude string or number',
  latitudeLongitudeString: '$property must be a latitude,longitude string',
  longitudeStringOrNumber: '$property must be a longitude string or number',
  lowercaseString: '$property must be a lowercase string',
  MACAddress: '$property must be a MAC Address',
  mongodbId: '$property must be a mongodb id',
  nonEmptyObject: '$property must be a non-empty object',
  numberToTheSpecifiedConstraint: '$property must be a number conforming to the specified constraints',
  numberString: '$property must be a number string',
  phoneNumber: '$property must be a phone number',
  port: '$property must be a port',
  postalCode: '$property must be a postal code',
  semanticVersioningSpecification: '$property must be a Semantic Versioning Specification',
  string: '$property must be a string',
  validDomainName: '$property must be a valid domain name',
  validEnumValue: '$property must be a valid enum value',
  ISO8601DateString: '$property must be a valid ISO 8601 date string',
  alpha2Code: '$property must be a valid ISO31661 Alpha2 code',
  alpha3Code: '$property must be a valid ISO31661 Alpha3 code',
  validPhoneNumber: '$property must be a valid phone number',
  timeInHHMM: '$property must be a valid representation of military time in the format HH:MM',
  array: '$property must be an array',
  EAN: '$property must be an EAN (European Article Number)',
  email: '$property must be an email',
  ethereumAddress: '$property must be an Ethereum address',
  IBAN: '$property must be an IBAN',
  instanceOf: '$property must be an instance of $constraint1',
  integerNumber: '$property must be an integer number',
  ipAddress: '$property must be an ip address',
  ISBN: '$property must be an ISBN',
  ISIN: '$property must be an ISIN (stock/security identifier)',
  ISRC: '$property must be an ISRC',
  object: '$property must be an object',
  URLAddress: '$property must be an URL address',
  UUID: '$property must be an UUID',
  base32: '$property must be base32 encoded',
  base64: '$property must be base64 encoded',
  divisibleBy: '$property must be divisible by $constraint1',
  empty: '$property must be empty',
  equalTo: '$property must be equal to $constraint1',
  locale: '$property must be locale',
  longerThanOrEqualToAndShorter:
    '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters',
  longerThanOrEqualTo: '$property must be longer than or equal to $constraint1 characters',
  magnetUriFormat: '$property must be magnet uri format',
  MIMEType: '$property must be MIME type format',
  followingValues: '$property must be one of the following values: $constraint1',
  RFC3339date: '$property must be RFC 3339 date',
  RGBColor: '$property must be RGB color',
  shorterThanOrEqualTo: '$property must be shorter than or equal to $constraint1 characters',
  uppercase: '$property must be uppercase',
  octalNumber: '$property must be valid octal number',
  passportNumber: '$property must be valid passport number',
  containValues: '$property must contain $constraint1 values',
  containAString: '$property must contain a $constraint1 string',
  fullWidthAndHalfWidthChars: '$property must contain a full-width and half-width characters',
  fullWidthChars: '$property must contain a full-width characters',
  halfWidthChars: '$property must contain a half-width characters',
  surrogatePairChars: '$property must contain any surrogate pairs chars',
  atLeastElements: '$property must contain at least $constraint1 elements',
  notMoreThanElements: '$property must contain not more than $constraint1 elements',
  containOneOrMoreMultiByteChars: '$property must contain one or more multibyte chars',
  onlyASCIIChars: '$property must contain only ASCII characters',
  onlyLetters: '$property must contain only letters (a-zA-Z)',
  onlyLettersAndNumbers: '$property must contain only letters and numbers',
  matchRegularExpression: '$property must match $constraint1 regular expression',
  notBeGreaterThan: '$property must not be greater than $constraint1',
  notBeLessThan: '$property must not be less than $constraint1',
  notBeEmpty: '$property should not be empty',
  notBeEqualTo: '$property should not be equal to $constraint1',
  notBeNullOrUndefined: '$property should not be null or undefined',
  notBeFollowingValues: '$property should not be one of the following values: $constraint1',
  notContainValues: '$property should not contain $constraint1 values',
  notContainAString: '$property should not contain a $constraint1 string',
  byteLengthRange: "$property's byte length must fall into ($constraint1, $constraint2) range",
  allBeUnique: "All $property's elements must be unique",
  eachValueIn: 'each value in ',
  maxAllowedDateFor: 'maximal allowed date for $property is $constraint1',
  minAllowedDate: 'minimal allowed date for $property is $constraint1',
  nestedMustBeObjectArray: 'nested property $property must be either object or array',
};

export default Messages;
